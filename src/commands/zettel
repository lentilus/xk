#!/bin/bash

expand_template() (
        # populate subshell with vars
        # NAME="$(echo "$1" | tr '_' ' ')"
        NAME="$1"
        export NAME
        export PREAMBLE="$PREAMBLE_FILE"
        envsubst < "$ZETTEL_TEMPLATE"
    )

copy_files() {
        log "copy preamble"
        echo "copying preamble..."
        cp  "$ZETTEL_PREAMBLE" "$ZETTEL_DATA/$PREAMBLE_FILE"
        echo "copying base files..."

        # copy both .files and files
        find "$ZETTEL_WORKDIR/../resources/base_files/" \
            -mindepth 1 -maxdepth 1 -name "*" \
            -exec cp -r '{}' "$ZETTEL_DATA" \;
}

zettel_init() {
    if [ -d "$ZETTEL_DATA" ]; then
        log "reinitializing"
        copy_files
        exit
    fi
    log "initializing new zettelkasten"
    mkdir "$ZETTEL_DATA" || log "failed to init"
    copy_files
}


zettel_ls() {
    list="$(find "$ZETTEL_DATA" -mindepth 2 -maxdepth 2 -type f -name "$ZETTEL_FILENAME")"
    for z in $list
    do
        # use regex to emulate $(basename $(dirname ...))
        z_dir=${z%/*}
        z_final=${z_dir##*/}
        printf %"s\n" "$z_final"
    done
}

zettel_rm() {
    eval "$(parse_args "$@")"
    rm -r "$ZETTEL_DATA/${zettel:?}" || log "error removing zettel"
}

zettel_path() {
    eval "$(parse_args "$@")"

    if [[ -n $zettel ]]; then
        [[ -d  "$ZETTEL_DATA/$zettel" ]] || exit 1
        echo "$ZETTEL_DATA/$zettel"
        exit
    elif [[ -n $path ]]; then 
        supplied="$(dirname "$(dirname "$path")")"

        # test validity of path
        [[ "$ZETTEL_DATA" -ef "$supplied" ]] || exit 1
        [[ -f $path ]] || exit 1
        
        basename "$(dirname "$path")"
        exit
    fi
    echo "$ZETTEL_DATA"
}

zettel_insert() {
    eval "$(parse_args "$@")"

    if [ -d "$ZETTEL_DATA/$zettel" ]; then
        log "$zettel exists, aborting"
        exit
    fi

    mkdir "$ZETTEL_DATA/$zettel" || exit
    expand_template "$zettel" > "$ZETTEL_DATA/$zettel/$ZETTEL_FILENAME"
    touch "$ZETTEL_DATA/$zettel/$REFERENCE_FILENAME" || exit
    touch "$ZETTEL_DATA/$zettel/$TAG_FILENAME" || exit
    log "created $zettel"
    echo "$zettel"
}

zettel_mv() {
    eval "$(parse_args "$@")"
    old_title=$zettel
    new_title=$new_zettel

    log "moving zettel"
    mv "$ZETTEL_DATA/$old_title" "$ZETTEL_DATA/$new_title" || exit

    log "updating references"
    for zet in $(zettel_ls); do
        # if removal of ref was succesfull, update it
        if ref_rm -z "$zet" -r "$old_title" &> /dev/null; then
            log "-- updating reference of $zet"
            ref_insert "-z" "$zet" "-r" "$new_title"
        fi
    done
    echo "$new_title"
}

case "$1" in
    init)
        shift
        zettel_init
        ;;
    zet)
        ;&
    ls)
        shift
        zettel_ls
        ;;
    rm)
        shift
        zettel_rm "$@"
        ;;
    mv)
        shift
        zettel_mv "$@"
        ;;
    path)
        shift
        zettel_path "$@"
        ;;
    insert)
        shift
        zettel_insert "$@"
        ;;
    *)
        echo "invalid top level command $1."
        ;;
esac
